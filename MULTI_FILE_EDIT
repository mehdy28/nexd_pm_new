FILE: components/documents/editor.tsx
"use client"

import { useEffect } from "react"
import { BlockNoteView, useCreateBlockNote } from "@blocknote/react"

type Props = {
  docId: string
  contentJSON: string // stringified BlockNote document (array of blocks)
  onChange: (json: string) => void
}

/**
 * Minimal BlockNote editor: relies on our own CSS (identity.css) instead of importing module CSS.
 * The BlockNote UI provides inline/bubble menus like Notion.
 */
export function DocumentEditor({ docId, contentJSON, onChange }: Props) {
  let initial: any[] = []
  try {
    initial = contentJSON ? (JSON.parse(contentJSON) as any[]) : []
  } catch {
    initial = []
  }

  // Create editor with initial content
  const editor = useCreateBlockNote({
    initialContent: initial,
  })

  // Propagate changes upstream as JSON
  useEffect(() => {
    if (!editor) return
    const unsub = editor.onChange(() => {
      const json = JSON.stringify(editor.document)
      onChange(json)
    })
    return () => unsub?.()
  }, [editor, onChange])

  // Force a fresh editor when switching docs so initialContent is respected
  return (
    <div className="bn-wrapper min-h-0 flex-1 overflow-auto">
      <BlockNoteView key={docId} editor={editor} theme="light" className="bn-surface min-h-[400px]" />
    </div>
  )
}

FILE: styles/identity.css (append at end)
/* ---- Minimal BlockNote styles for preview (no module CSS imports) ---- */
.bn-wrapper {
  /* container for scroll */
}
.bn-surface {
  background: var(--card-surface);
  color: var(--foreground);
  border: 1px solid var(--border);
  border-radius: var(--radius-lg);
  padding: 12px 14px;
}
/* paragraphs, headings, lists spacing */
.bn-surface p { margin: 0.5rem 0; line-height: 1.6; }
.bn-surface h1 { font-size: 1.5rem; line-height: 1.3; font-weight: 700; margin: 1rem 0 0.5rem; }
.bn-surface h2 { font-size: 1.25rem; line-height: 1.35; font-weight: 700; margin: 0.75rem 0 0.5rem; }
.bn-surface ul, .bn-surface ol { padding-left: 1.25rem; margin: 0.5rem 0; }
.bn-surface blockquote {
  margin: 0.75rem 0;
  padding-left: 0.75rem;
  border-left: 3px solid var(--slate-300);
  color: var(--slate-600);
}
.bn-surface pre {
  background: #0f172a;
  color: #e2e8f0;
  border-radius: var(--radius-md);
  padding: 10px 12px;
  overflow: auto;
  font-size: 0.875rem;
}
.bn-surface a { color: #059669; text-decoration: underline; }
.bn-surface ::selection {
  background: var(--selection);
}

.columns-scroll {
  display: flex;
  gap: 16px;
  height: 100%;
  overflow: auto;
  padding: 16px;
  background: var(--muted-bg);
}

.column {
  width: 320px;
  min-width: 320px;
  background: var(--card-surface);
  border: 1px solid var(--border);
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-md);
  display: flex;
  flex-direction: column;
}

.column-header {
  display: flex;
  align-items: center;
  gap: 8px;
  justify-content: space-between;
  padding: 12px;
  border-bottom: 1px solid var(--border);
}

.column-body {
  padding: 10px;
  height: 100%;
  overflow: auto;
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.card {
  background: var(--card-surface);
  border: 1px solid var(--border);
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-md);
  padding: 12px;
}

.badge-low {
  background: var(--prio-low-bg);
  color: var(--prio-low-fg);
  border: 1px solid var(--prio-low-border);
  border-radius: 9999px;
  padding: 2px 8px;
  font-size: 11px;
}
.badge-medium {
  background: var(--prio-med-bg);
  color: var(--prio-med-fg);
  border: 1px solid var(--prio-med-border);
  border-radius: 9999px;
  padding: 2px 8px;
  font-size: 11px;
}
.badge-high {
  background: var(--prio-high-bg);
  color: var(--prio-high-fg);
  border: 1px solid var(--prio-high-border);
  border-radius: 9999px;
  padding: 2px 8px;
  font-size: 11px;
}

FILE: styles/theme.css
:root {
  /* Core surfaces & text */
  --background: #f7f9fb;        /* app canvas: very light gray */
  --foreground: #0f172a;        /* text */
  --muted-bg: #f3f5f8;          /* muted section rows/headers */
  --muted-fg: #64748b;          /* muted text */
  --border: #e8edf2;            /* subtle borders */

  /* Brand palette inspired by the reference */
  --primary: #16b364;           /* green accent */
  --primary-foreground: #ffffff;

  --secondary: #f59f45;         /* orange accent */
  --secondary-foreground: #ffffff;

  /* Extended tints for subtle fills */
  --primary-50: #eafaf1;
  --primary-100: #d4f4e3;
  --primary-200: #a8e9c7;

  --secondary-50: #fff3e6;
  --secondary-100: #ffe7cc;
  --secondary-200: #ffd6a6;

  /* Neutral scale */
  --slate-50: #f8fafc;
  --slate-100: #f1f5f9;
  --slate-200: #e2e8f0;
  --slate-300: #cbd5e1;
  --slate-400: #94a3b8;
  --slate-500: #64748b;
  --slate-600: #475569;
  --slate-700: #334155;
  --slate-800: #1f2937;
  --slate-900: #0f172a;

  /* Radii and Shadows (rounded + soft) */
  --radius: 14px;               /* shadcn global */
  --radius-sm: 10px;
  --radius-md: 14px;
  --radius-lg: 16px;

  --shadow-sm: 0 1px 2px rgba(2, 6, 23, 0.05);
  --shadow-md: 0 8px 24px rgba(2, 6, 23, 0.08);
  --shadow-lg: 0 18px 44px rgba(2, 6, 23, 0.12);

  /* Charts (HSL for shadcn/ui ChartContainer) */
  --chart-1: 152 56% 40%;   /* green line (revenue) */
  --chart-2: 31 92% 55%;    /* orange line (target)  */
  --chart-3: 197 92% 44%;   /* teal/cyan bars        */
  --chart-4: 224 14% 58%;   /* neutral bar/line      */
  --chart-5: 350 85% 62%;   /* alert/pink (if needed)*/

  /* App shell & cards */
  --app-surface: var(--background);
  --card-surface: #ffffff;

  /* Scrollbar */
  --scrollbar: var(--slate-300);

  /* Priority (Kanban/list chips) */
  --prio-low-bg: #eafaf1;
  --prio-low-fg: #10754b;
  --prio-low-border: #c8f0dc;

  --prio-med-bg: #fff3e6;
  --prio-med-fg: #ad5d06;
  --prio-med-border: #ffe1c5;

  --prio-high-bg: #ffe9ea;
  --prio-high-fg: #b42318;
  --prio-high-border: #ffd2d6;
}

html, body {
  background: var(--app-surface);
  color: var(--foreground);
}

/* Unified scrollbars */
* { scrollbar-width: thin; scrollbar-color: var(--scrollbar) transparent; }
*::-webkit-scrollbar { height: 10px; width: 10px; }
*::-webkit-scrollbar-track { background: transparent; }
*::-webkit-scrollbar-thumb {
  background-color: var(--scrollbar);
  border-radius: 10px;
  border: 2px solid transparent;
  background-clip: padding-box;
}

/* Reusable SaaS card surface */
.saas-card {
  background: var(--card-surface);
  border: 1px solid var(--border);
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-md);
}

/* Soft section header */
.saas-section-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 8px;
  padding: 12px 14px;
  border-bottom: 1px solid var(--border);
  background: var(--muted-bg);
  border-top-left-radius: var(--radius-lg);
  border-top-right-radius: var(--radius-lg);
}

/* Primary button helper (applies to shadcn Button via className) */
.btn-primary {
  background: var(--primary) !important;
  color: var(--primary-foreground) !important;
}
.btn-primary:hover { filter: brightness(0.95); }

/* Chips & badges */
.chip {
  display: inline-flex;
  align-items: center;
  gap: 6px;
  font-size: 12px;
  border-radius: 9999px;
  padding: 4px 8px;
  border: 1px solid var(--border);
  background: var(--muted-bg);
  color: var(--foreground);
}
.chip--positive {
  background: var(--primary-50);
  border-color: var(--primary-200);
  color: var(--prio-low-fg);
}
.chip--negative {
  background: #ffe9ea;
  border-color: #ffd2d6;
  color: #b42318;
}

/* Calendar helpers */
.calendar-cell {
  min-height: 140px;
  overflow: hidden;
  padding: 10px;
  transition: background-color 120ms ease;
  border-left: 1px solid var(--border);
  border-top: 1px solid var(--border);
}
.calendar-cell.outside { background: #fafcff; }
.calendar-cell.over { background: var(--slate-100); }

.today-badge {
  background: var(--primary);
  color: var(--primary-foreground);
  border-radius: 999px;
  padding: 2px 8px;
  font-size: 10px;
  font-weight: 600;
}

/* Generic task pill used in Calendar */
.task-pill {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 6px 10px;
  font-size: 12px;
  border-radius: 10px;
  background: var(--primary-50);
  color: var(--foreground);
  border: 1px solid var(--primary-200);
  box-shadow: var(--shadow-sm);
}
.task-pill .pill-icon {
  width: 14px;
  height: 14px;
  color: var(--primary);
}

/* Progress bar (Dashboard) */
.progress { position: relative; height: 8px; width: 100%; border-radius: 999px; background: var(--slate-100); }
.progress > .bar { height: 100%; border-radius: 999px; background: var(--primary); }

/* Kanban specifics unified to the theme */
.columns-scroll { display: flex; gap: 16px; height: 100%; overflow: auto; padding: 16px; background: var(--muted-bg); }
.column {
  width: 320px; min-width: 320px;
  background: var(--card-surface);
  border: 1px solid var(--border);
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-md);
  display: flex; flex-direction: column;
}
.column-header {
  display: flex; align-items: center; gap: 8px; justify-content: space-between;
  padding: 12px; border-bottom: 1px solid var(--border); background: #fff;
  border-top-left-radius: var(--radius-lg); border-top-right-radius: var(--radius-lg);
}
.column-body { padding: 10px; height: 100%; overflow: auto; display: flex; flex-direction: column; gap: 12px; }
.card {
  background: var(--card-surface);
  border: 1px solid var(--border);
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-sm);
  padding: 12px;
}

/* Priority badge tokens mapped (Kanban/List) */
.badge-low    { background: var(--prio-low-bg);  color: var(--prio-low-fg);  border: 1px solid var(--prio-low-border);  border-radius: 9999px; padding: 2px 8px; font-size: 11px; }
.badge-medium { background: var(--prio-med-bg);  color: var(--prio-med-fg);  border: 1px solid var(--prio-med-border);  border-radius: 9999px; padding: 2px 8px; font-size: 11px; }
.badge-high   { background: var(--prio-high-bg); color: var(--prio-high-fg); border: 1px solid var(--prio-high-border); border-radius: 9999px; padding: 2px 8px; font-size: 11px; }


FILE: components/home/due-soon.tsx
export function DueSoon() {
  const tasks = [
    { id: "1", title: "Fix the auth system", due: "Tomorrow", points: 7 },
    { id: "2", title: "Random task", due: "May 22", points: 12 },
    { id: "3", title: "Create wireframe system", due: "May 23", points: 13 },
  ]
  return (
    <div className="saas-card p-4">
      <h3 className="font-semibold mb-3">Due soon</h3>
      <ul className="space-y-2">
        {tasks.map((t) => (
          <li key={t.id} className="flex items-center justify-between text-sm">
            <span>{t.title}</span>
            <span className="chip">{t.due}</span>
          </li>
        ))}
      </ul>
    </div>
  )
}

FILE: components/home/projects-list.tsx
export function ProjectsList() {
  const projects = [
    { id: "nexd", name: "NEXD.PM" },
    { id: "alpha", name: "Alpha Website" },
    { id: "mobile", name: "Mobile App" },
  ]
  return (
    <div className="saas-card p-4">
      <h3 className="font-semibold mb-3">Projects</h3>
      <ul className="grid sm:grid-cols-2 lg:grid-cols-3 gap-3">
        {projects.map((p) => (
          <li key={p.id} className="rounded-lg border border-[var(--border)] p-3 hover:bg-[var(--muted-bg)]">
            <a href={`/project/${p.id}`} className="font-medium">
              {p.name}
            </a>
            <p className="text-xs text-slate-500 mt-1">Open project</p>
          </li>
        ))}
      </ul>
    </div>
  )
}

FILE: components/tasks/list-view.tsx
import { Button } from "@/components/ui/button"
import { Separator } from "@/components/ui/separator"

type Priority = "Low" | "Medium" | "High"

function HeaderRow() {
  return (
    <div className="grid grid-cols-[1.5fr_1fr_1fr_1fr_0.5fr] px-6 py-4 text-sm font-medium text-muted-foreground">
      <div>Task</div>
      <div>Assignee</div>
      <div>Due date</div>
      <div>Tags</div>
      <div className="text-right">Priority</div>
    </div>
  )
}

export function TaskList() {
  return (
    <div className="page-scroller p-6">
      <div className="flex items-center gap-3">
        <Button className="h-9 rounded-md btn-primary">+ Add section</Button>
        {/* rest of code here */}
      </div>

      <div className="mt-4 w-full saas-card">
        <HeaderRow />
        <Separator />
        {/* sections... */}
      </div>
    </div>
  )
}

function TagPill({ text = "UI" }: { text?: string }) {
  return <span className="chip">{text}</span>
}
function PriorityPill({ level }: { level: Priority }) {
  const map: Record<Priority, string> = {
    Low: "badge-low",
    Medium: "badge-medium",
    High: "badge-high",
  }
  return <span className={map[level]}>{level}</span>
}

FILE: components/documents/documents-view.tsx
<div className="saas-card">
<div className="min-h-0 overflow-hidden saas-card p-4">

FILE: components/tasks/dashboard-view.tsx
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { CompletionChart } from "@/components/tasks/completion-chart"
import { CalendarIcon, CheckCheck, ListChecks, User2 } from 'lucide-react'

type Task = {
  id: string
  title: string
  completed: boolean
}

function completionPercent(tasks: Task[]) {
  if (!tasks.length) return 0
  const completed = tasks.filter((t) => t.completed).length
  return (completed / tasks.length) * 100
}

export function TasksDashboard() {
  const tasks: Task[] = [
    { id: "1", title: "Design login form", completed: true },
    { id: "2", title: "Implement auth system", completed: true },
    { id: "3", title: "Create dashboard wireframe", completed: false },
    { id: "4", title: "Connect to Supabase", completed: false },
  ]

  return (
    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
      <Card className="saas-card lg:col-span-1">
        <CardHeader>
          <CardTitle>Total tasks</CardTitle>
          <CardDescription>All tasks in your project</CardDescription>
        </CardHeader>
        <CardContent className="flex items-center space-x-2">
          <ListChecks className="h-4 w-4 text-muted-foreground" />
          <span className="text-3xl font-bold">{tasks.length}</span>
        </CardContent>
      </Card>

      <Card className="saas-card lg:col-span-1">
        <CardHeader>
          <CardTitle>Completed tasks</CardTitle>
          <CardDescription>Tasks that are marked as done</CardDescription>
        </CardHeader>
        <CardContent className="flex items-center space-x-2">
          <CheckCheck className="h-4 w-4 text-muted-foreground" />
          <span className="text-3xl font-bold">{tasks.filter((t) => t.completed).length}</span>
        </CardContent>
      </Card>

      <Card className="saas-card lg:col-span-1">
        <CardHeader>
          <CardTitle>Completion rate</CardTitle>
          <CardDescription>Tasks completed this month</CardDescription>
        </CardHeader>
        <CardContent>
          <CompletionChart />
          <div className="mt-1 flex items-center gap-3">
            <div className="progress">
              <div className="bar" style={{ width: `${Math.min(100, completionPercent(tasks))}%` }} />
            </div>
            <div className="w-16 text-right text-sm font-medium">
              {Math.round(completionPercent(tasks))}%
            </div>
          </div>
        </CardContent>
      </Card>

      <Card className="saas-card">
        <CardHeader>
          <CardTitle>Team members</CardTitle>
          <CardDescription>Active members in your project</CardDescription>
        </CardHeader>
        <CardContent className="flex items-center space-x-2">
          <User2 className="h-4 w-4 text-muted-foreground" />
          <span className="text-3xl font-bold">7</span>
        </CardContent>
      </Card>

      <Card className="saas-card">
        <CardHeader>
          <CardTitle>Upcoming deadlines</CardTitle>
          <CardDescription>Tasks due this week</CardDescription>
        </CardHeader>
        <CardContent className="flex items-center space-x-2">
          <CalendarIcon className="h-4 w-4 text-muted-foreground" />
          <span className="text-3xl font-bold">3</span>
        </CardContent>
      </Card>
    </div>
  )
}

FILE: components/tasks/calendar-view.tsx
"use client"

import { useState } from "react"
import { Calendar } from "@/components/ui/calendar"
import { Card } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { cn } from "@/lib/utils"
import { CalendarIcon, ListChecks, Sheet, SheetIcon as SheetContent, SheetIcon as SheetTrigger } from 'lucide-react'

export function TasksCalendar() {
  const [date, setDate] = useState<Date | undefined>(new Date())
  const [view, setView] = useState<"day" | "week" | "month">("month")

  return (
    <div className="grid gap-4 md:grid-cols-4 lg:grid-cols-5">
      <Card className="saas-card md:col-span-3 lg:col-span-4">
        <div className="flex items-center justify-between p-4">
          <h3 className="text-lg font-semibold">Calendar</h3>
          <div className="flex items-center space-x-2">
            <Button
              size="sm"
              variant={view === "day" ? "default" : "ghost"}
              className={cn("h-8 px-2", view === "day" && "btn-primary")}
              onClick={() => setView("day")}
              title="Day view"
            >
              Day
            </Button>
            <Button
              size="sm"
              variant={view === "week" ? "default" : "ghost"}
              className={cn("h-8 px-2", view === "week" && "btn-primary")}
              onClick={() => setView("week")}
              title="Week view"
            >
              Week
            </Button>
            <Button
              size="sm"
              variant={view === "month" ? "default" : "ghost"}
              className={cn("h-8 px-2", view === "month" && "btn-primary")}
              onClick={() => setView("month")}
              title="Month view"
            >
              Month
            </Button>
          </div>
        </div>
        <Calendar mode="single" selected={date} onSelect={setDate} className="rounded-md border-none p-4" />
      </Card>

      <Card className="saas-card">
        <div className="flex items-center justify-between p-4">
          <h3 className="text-lg font-semibold">Tasks</h3>
          <Sheet>
            <SheetTrigger asChild>
              <Button size="icon" variant="ghost">
                <ListChecks className="h-4 w-4" />
              </Button>
            </SheetTrigger>
            <SheetContent className="w-full">
              <p>Tasks</p>
            </SheetContent>
          </Sheet>
        </div>
        <div className="space-y-3 p-4">
          <div className="flex items-center space-x-2">
            <CalendarIcon className="h-4 w-4 text-muted-foreground" />
            <span className="text-sm font-medium">May 15, 2023</span>
          </div>
          <div className="flex items-center space-x-2">
            <CalendarIcon className="h-4 w-4 text-muted-foreground" />
            <span className="text-sm font-medium">May 16, 2023</span>
          </div>
          <div className="flex items-center space-x-2">
            <CalendarIcon className="h-4 w-4 text-muted-foreground" />
            <span className="text-sm font-medium">May 17, 2023</span>
          </div>
        </div>
      </Card>
    </div>
  )
}

FILE: components/board/kanban-card.tsx
import { Card as ShadcnCard, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Badge } from "@/components/ui/badge"

type CardProps = {
  card: {
    id: string
    title: string
    description: string
    priority: "Low" | "Medium" | "High"
    assignee: {
      name: string
      avatar: string
    }
  }
  onOpen: () => void
}

export function KanbanCard({ card, onOpen }: CardProps) {
  return (
    <button className="card text-left hover:bg-[var(--muted-bg)]" onClick={onOpen} aria-label={`Open ${card.title}`}>
      <CardHeader>
        <CardTitle>{card.title}</CardTitle>
        <CardDescription>{card.description}</CardDescription>
      </CardHeader>
      <CardContent className="space-y-2">
        <div className="flex items-center space-x-2">
          <Avatar className="h-5 w-5">
            <AvatarImage src={card.assignee.avatar || "/placeholder.svg"} alt={card.assignee.name} />
            <AvatarFallback>{card.assignee.name[0]}</AvatarFallback>
          </Avatar>
          <span className="text-sm font-medium">{card.assignee.name}</span>
        </div>
        <Badge variant="secondary">{card.priority}</Badge>
      </CardContent>
    </button>
  )
}

FILE: components/layout/app-layout.tsx
import { MainNav } from "@/components/layout/main-nav"
import { Sidebar } from "@/components/layout/sidebar"
import { MobileSidebar } from "@/components/layout/mobile-sidebar"
import { SiteHeader } from "@/components/layout/site-header"
import { TailwindIndicator } from "@/components/tailwind-indicator"

import "@/styles/identity.css"
import "@/styles/theme.css"

type Props = {
  children: React.ReactNode
}

export function AppLayout({ children }: Props) {
  return (
    <div className="flex min-h-screen flex-col">
      <SiteHeader>
        <MainNav />
        <TailwindIndicator />
      </SiteHeader>
      <div className="border-b">
        <MobileSidebar />
      </div>
      <div className="grid flex-1 grid-cols-[auto_1fr] md:pl-6 lg:grid-cols-[280px_1fr]">
        <aside className="hidden lg:block">
          <Sidebar />
        </aside>
        <main className="flex-1">
          {children}
        </main>
      </div>
    </div>
  )
}
