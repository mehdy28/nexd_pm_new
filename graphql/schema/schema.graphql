# ----------------------------------
# Enums
# ----------------------------------
enum UserRole {
  ADMIN
  MEMBER
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  ARCHIVED
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum DependencyType {
  FINISH_TO_START
  START_TO_START
  FINISH_TO_FINISH
  START_TO_FINISH
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  UNPAID
}

enum ActivityType {
  TASK_CREATED
  TASK_UPDATED
  TASK_COMPLETED
  TASK_ASSIGNED
  PROJECT_CREATED
  PROJECT_UPDATED
  DOCUMENT_CREATED
  DOCUMENT_UPDATED
  WIREFRAME_CREATED
  WIREFRAME_UPDATED
  COMMENT_ADDED
  MEMBER_ADDED
  MEMBER_REMOVED
}

# ----------------------------------
# Models
# ----------------------------------
type User {
  id: ID!
  email: String!
  firstName: String
  lastName: String
  avatar: String
  firebaseUid: String
  # password: String # Not typically exposed in GraphQL output types
  role: UserRole!
  createdAt: String!
  updatedAt: String!

  workspaceMembers: [WorkspaceMember]
  ownedWorkspaces: [Workspace]
  projectMembers: [ProjectMember]
  assignedTasks: [Task]
  createdTasks: [Task]
  personalTasks: [Task]
  personalDocuments: [Document]
  personalWireframes: [Wireframe]
  personalPrompts: [Prompt]
  personalSections: [PersonalSection] # New: For personal sections
  activities: [Activity]
  comments: [Comment]
  mentions: [Mention]
}

type Workspace {
  id: ID!
  name: String!
  slug: String!
  description: String
  avatar: String
  plan: Plan!
  createdAt: String!
  updatedAt: String!
  owner: User!
  # New fields for Workspace
  industry: String
  teamSize: String
  workFields: [String!] # List of strings for work fields

  members: [WorkspaceMember!]!
  projects: [Project!]!
  subscription: Subscription
  settings: WorkspaceSettings
  personalTasks: [Task] # New: Personal tasks can also be associated with a workspace
}

type WorkspaceMember {
  id: ID!
  role: WorkspaceRole!
  joinedAt: String!
  workspace: Workspace!
  user: User!
}

type WorkspaceSettings {
  id: ID!
  allowGuestAccess: Boolean!
  timeZone: String!
  workspace: Workspace!
}

type Project {
  id: ID!
  name: String!
  description: String
  color: String!
  status: ProjectStatus!
  startDate: String
  endDate: String
  createdAt: String!
  updatedAt: String!
  workspace: Workspace!

  members: [ProjectMember!]!
  tasks: [Task!]!
  documents: [Document!]!
  wireframes: [Wireframe!]!
  prompts: [Prompt!]!
  activities: [Activity!]!
  sprints: [Sprint!]!    # New: Sprints for the project
  sections: [Section!]!  # New: Sections for the project
}

type ProjectMember {
  id: ID!
  role: ProjectRole!
  joinedAt: String!
  project: Project!
  user: User!
}

# New model: Sprint for a project
type Sprint {
  id: ID!
  name: String!
  description: String
  startDate: String!
  endDate: String!
  isCompleted: Boolean!
  createdAt: String!
  updatedAt: String!
  project: Project!
  tasks: [Task!]! # Tasks belonging to this sprint
}

# New model: Section for a project
type Section {
  id: ID!
  name: String!
  order: Int!
  createdAt: String!
  updatedAt: String!
  project: Project!
  tasks: [Task!]! # Tasks belonging to this section
}

# New model: PersonalSection for a user's personal tasks
type PersonalSection {
  id: ID!
  name: String!
  order: Int!
  createdAt: String!
  updatedAt: String!
  user: User!
  tasks: [Task!]! # Personal tasks belonging to this personal section
}

type Task {
  id: ID!
  title: String!
  description: String
  status: TaskStatus!
  priority: Priority!
  dueDate: String
  startDate: String
  endDate: String
  createdAt: String!
  updatedAt: String!

  # Relationships for project tasks
  project: Project
  sprint: Sprint      # New: for project tasks
  section: Section    # New: for project tasks

  # Relationships for personal tasks
  personalUser: User  # Original userId renamed for clarity for personal tasks
  personalWorkspace: Workspace # New: Workspace for personal tasks
  personalSection: PersonalSection # New: for personal tasks

  # Common relationships (assignee, creator, subtasks, dependencies)
  assignee: User
  creator: User!

  parent: Task
  subtasks: [Task!]!

  dependencies: [TaskDependency!]!
  dependents: [TaskDependency!]!

  comments: [Comment!]!
  activities: [Activity!]!
  labels: [TaskLabel!]!
}

type Label {
  id: ID!
  name: String!
  color: String!
  # workspaceId: String! # Typically exposed via the workspace object itself
  workspace: Workspace! # Relation to Workspace
  tasks: [TaskLabel!]!
}

type TaskLabel {
  task: Task!
  label: Label!
}

type Document {
  id: ID!
  title: String!
  content: JSON
  createdAt: String!
  updatedAt: String!

  project: Project
  personalUser: User

  comments: [Comment!]!
  activities: [Activity!]!
}

type Wireframe {
  id: ID!
  title: String!
  data: JSON!
  thumbnail: String
  createdAt: String!
  updatedAt: String!

  project: Project
  personalUser: User

  comments: [Comment!]!
  activities: [Activity!]!
}

type Comment {
  id: ID!
  content: String!
  createdAt: String!
  updatedAt: String!
  author: User!

  task: Task
  document: Document
  wireframe: Wireframe
  prompt: Prompt

  mentions: [Mention!]!
}

type Mention {
  id: ID!
  comment: Comment!
  user: User!
}

type Activity {
  id: ID!
  type: ActivityType!
  data: JSON!
  createdAt: String!
  user: User!

  project: Project
  task: Task
  document: Document
  wireframe: Wireframe
  prompt: Prompt
}

type Subscription {
  id: ID!
  plan: Plan!
  status: SubscriptionStatus!
  currentPeriodEnd: String!
  cancelAtPeriodEnd: Boolean!
  stripeCustomerId: String
  stripeSubscriptionId: String
  createdAt: String!
  updatedAt: String!
  workspace: Workspace!
}

type Prompt {
  id: ID!
  title: String!
  content: String!
  description: String
  category: String
  tags: [String!]!
  isPublic: Boolean!
  createdAt: String!
  updatedAt: String!

  project: Project
  user: User

  comments: [Comment!]!
  activities: [Activity!]!
}

type TaskDependency {
  id: ID!
  type: DependencyType!
  lag: Int!

  precedingTask: Task!
  dependentTask: Task!
}

# ----------------------------------
# Root Queries
# ----------------------------------
type Query {
  users: [User!]!
  user(id: ID!): User

  workspaces: [Workspace!]!
  workspace(id: ID!): Workspace

  projects: [Project!]!
  project(id: ID!): Project

  sprints: [Sprint!]! # New
  sprint(id: ID!): Sprint # New

  sections: [Section!]! # New
  section(id: ID!): Section # New

  personalSections: [PersonalSection!]! # New
  personalSection(id: ID!): PersonalSection # New

  tasks: [Task!]!
  task(id: ID!): Task

  documents: [Document!]!
  document(id: ID!): Document

  wireframes: [Wireframe!]!
  wireframe(id: ID!): Wireframe

  comments: [Comment!]!
  comment(id: ID!): Comment

  activities: [Activity!]!
  activity(id: ID!): Activity

  prompts: [Prompt!]!
  prompt(id: ID!): Prompt

  me: User
}

# ----------------------------------
# Root Mutations (CRUD-style)
# ----------------------------------
type Mutation {
  createUser(email: String!, password: String, firstName: String, lastName: String, role: UserRole): User! # Added password to creation
  updateUser(id: ID!, firstName: String, lastName: String, avatar: String, role: UserRole): User! # Removed name from update, added avatar
  deleteUser(id: ID!): Boolean!

  createWorkspace(name: String!, slug: String!, description: String, avatar: String, industry: String, teamSize: String, workFields: [String!]): Workspace! # Added new fields
  updateWorkspace(id: ID!, name: String, description: String, avatar: String, industry: String, teamSize: String, workFields: [String!]): Workspace! # Added new fields
  deleteWorkspace(id: ID!): Boolean!

  createProject(workspaceId: ID!, name: String!, description: String, color: String, status: ProjectStatus, startDate: String, endDate: String): Project! # Added more fields for creation
  updateProject(id: ID!, name: String, description: String, color: String, status: ProjectStatus, startDate: String, endDate: String): Project! # Added more fields for update
  deleteProject(id: ID!): Boolean!

  createSprint(projectId: ID!, name: String!, description: String, startDate: String!, endDate: String!): Sprint! # New mutation
  updateSprint(id: ID!, name: String, description: String, startDate: String, endDate: String, isCompleted: Boolean): Sprint! # New mutation
  deleteSprint(id: ID!): Boolean! # New mutation

  createSection(projectId: ID!, name: String!, order: Int): Section! # New mutation
  updateSection(id: ID!, name: String, order: Int): Section! # New mutation
  deleteSection(id: ID!): Boolean! # New mutation

  createPersonalSection(userId: ID!, name: String!, order: Int): PersonalSection! # New mutation
  updatePersonalSection(id: ID!, name: String, order: Int): PersonalSection! # New mutation
  deletePersonalSection(id: ID!): Boolean! # New mutation

  createTask(
    title: String!,
    description: String,
    status: TaskStatus,
    priority: Priority,
    dueDate: String,
    startDate: String,
    endDate: String,
    # Project Task fields
    projectId: ID,
    sprintId: ID,
    sectionId: ID,
    # Personal Task fields
    personalUserId: ID,
    personalWorkspaceId: ID,
    personalSectionId: ID,
    # Common fields
    assigneeId: ID,
    creatorId: ID! # Creator is always required
    parentId: ID
  ): Task!
  updateTask(
    id: ID!,
    title: String,
    description: String,
    status: TaskStatus,
    priority: Priority,
    dueDate: String,
    startDate: String,
    endDate: String,
    # Project Task fields for update
    projectId: ID, # Allowing re-assigning to a project (or making it personal)
    sprintId: ID,
    sectionId: ID,
    # Personal Task fields for update
    personalUserId: ID,
    personalWorkspaceId: ID,
    personalSectionId: ID,
    # Common fields for update
    assigneeId: ID,
    parentId: ID
  ): Task!
  deleteTask(id: ID!): Boolean!

  createDocument(title: String!, content: JSON, projectId: ID, userId: ID): Document! # Added content to creation
  updateDocument(id: ID!, title: String, content: JSON): Document!
  deleteDocument(id: ID!): Boolean!

  createWireframe(title: String!, data: JSON!, thumbnail: String, projectId: ID, userId: ID): Wireframe! # Added data and thumbnail to creation
  updateWireframe(id: ID!, title: String, data: JSON, thumbnail: String): Wireframe!
  deleteWireframe(id: ID!): Boolean!

  createComment(content: String!, authorId: ID!, taskId: ID, documentId: ID, wireframeId: ID, promptId: ID): Comment! # Added authorId
  updateComment(id: ID!, content: String!): Comment!
  deleteComment(id: ID!): Boolean!

  createPrompt(title: String!, content: String!, description: String, category: String, tags: [String!], isPublic: Boolean, projectId: ID, userId: ID): Prompt! # Added more fields for creation
  updatePrompt(id: ID!, title: String, content: String, description: String, category: String, tags: [String!], isPublic: Boolean): Prompt! # Added more fields for update
  deletePrompt(id: ID!): Boolean!

  createLabel(name: String!, color: String!, workspaceId: ID!): Label! # New mutation
  updateLabel(id: ID!, name: String, color: String, workspaceId: ID): Label! # New mutation
  deleteLabel(id: ID!): Boolean! # New mutation

  createTaskLabel(taskId: ID!, labelId: ID!): TaskLabel! # New mutation
  deleteTaskLabel(taskId: ID!, labelId: ID!): Boolean! # New mutation

  createTaskDependency(precedingTaskId: ID!, dependentTaskId: ID!, type: DependencyType, lag: Int): TaskDependency! # New mutation
  updateTaskDependency(id: ID!, type: DependencyType, lag: Int): TaskDependency! # New mutation
  deleteTaskDependency(id: ID!): Boolean! # New mutation



    setupWorkspace(
    userId: ID!
    workspaceName: String!
    workspaceDescription: String
    projectName: String!
    projectDescription: String
    industry: String
    teamSize: String
    workFields: [String!]
  ): Workspace! # Returns the created Workspace
}

# ----------------------------------
# Scalars
# ----------------------------------
scalar JSON