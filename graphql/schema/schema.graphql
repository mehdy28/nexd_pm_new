# ----------------------------------
# Enums
# ----------------------------------

enum TaskStatusGQL { # Your TaskStatus enum from Prisma
  TODO
  DONE
}

enum PriorityGQL { # Your Priority enum from Prisma
  LOW
  MEDIUM
  HIGH
}

enum SprintStatus { # New enum for Sprint status
  PLANNING
  ACTIVE
  COMPLETED
}

enum UserRole {
  ADMIN
  MEMBER
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  ARCHIVED
  CANCELLED
}

enum TaskStatus {
  TODO
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum DependencyType {
  FINISH_TO_START
  START_TO_START
  FINISH_TO_FINISH
  START_TO_FINISH
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  UNPAID
}

enum ActivityType {
  TASK_CREATED
  TASK_UPDATED
  TASK_COMPLETED
  TASK_ASSIGNED
  PROJECT_CREATED
  PROJECT_UPDATED
  DOCUMENT_CREATED
  DOCUMENT_UPDATED
  WIREFRAME_CREATED
  WIREFRAME_UPDATED
  COMMENT_ADDED
  MEMBER_ADDED
  MEMBER_REMOVED
}

# ----------------------------------
# Models
# ----------------------------------


type User {
  id: ID!
  email: String!
  firstName: String
  lastName: String
  avatar: String
  firebaseUid: String
  # password: String # Not typically exposed in GraphQL output types
  role: UserRole!
  createdAt: String!
  updatedAt: String!

  workspaceMembers: [WorkspaceMember]
  ownedWorkspaces: [Workspace]
  projectMembers: [ProjectMember]
  assignedTasks: [Task]
  createdTasks: [Task]
  personalTasks: [Task]
  personalDocuments: [Document]
  personalWireframes: [Wireframe]
  personalPrompts: [Prompt]
  personalSections: [PersonalSection] # New: For personal sections
  activities: [Activity]
  comments: [Comment]
  mentions: [Mention]
}

type Workspace {
  id: ID!
  name: String!
  slug: String!
  description: String
  avatar: String
  plan: Plan!
  createdAt: String!
  updatedAt: String!
  owner: User!
  # New fields for Workspace
  industry: String
  teamSize: String
  workFields: [String!] # List of strings for work fields

  members: [WorkspaceMember!]!
  projects: [Project!]!
  subscription: Subscription
  settings: WorkspaceSettings
  personalTasks: [Task] # New: Personal tasks can also be associated with a workspace
}

type WorkspaceMember {
  id: ID!
  role: WorkspaceRole!
  joinedAt: String!
  workspace: Workspace!
  user: User!
}

type WorkspaceSettings {
  id: ID!
  allowGuestAccess: Boolean!
  timeZone: String!
  workspace: Workspace!
}

type Project {
  id: ID!
  name: String!
  description: String
  color: String!
  status: ProjectStatus!
  startDate: String
  endDate: String
  createdAt: String!
  updatedAt: String!
  workspace: Workspace!

  members: [ProjectMember!]!
  tasks: [Task!]!
  documents: [Document!]!
  wireframes: [Wireframe!]!
  prompts: [Prompt!]!
  activities: [Activity!]!
  sprints: [Sprint!]!    # New: Sprints for the project
  sections: [Section!]!  # New: Sections for the project

  projectMemberCount: Int!
  totalTaskCount: Int!
  completedTaskCount: Int!
}

type ProjectMember {
  id: ID!
  role: ProjectRole!
  joinedAt: String!
  project: Project!
  user: User!
}

# New model: Sprint for a project
type Sprint {
  id: ID!
  name: String!
  description: String
  startDate: String!
  endDate: String!
  isCompleted: Boolean!
  createdAt: String!
  updatedAt: String!
  project: Project!
  tasks: [Task!]! # Tasks belonging to this sprint
  milestones: [Milestone!]!
}

type Milestone {
  id: ID!
  name: String!
  description: String
  dueDate: String! # ISO Date string
  isCompleted: Boolean!
  createdAt: String!
  updatedAt: String!
  sprint: SprintDetails! # Assuming SprintDetails is comprehensive enough, or SprintNameId
}



# New model: Section for a project
type Section {
  id: ID!
  name: String!
  order: Int! # To define the order of sections (e.g., TODO, IN_PROGRESS)
  createdAt: String!
  updatedAt: String!
  project: Project!

  tasks: [Task!]! # Tasks belonging to this section
}

# New model: PersonalSection for a user's personal tasks
type PersonalSection {
  id: ID!
  name: String!
  order: Int!
  createdAt: String!
  updatedAt: String!
  user: User!
  tasks: [Task!]! # Personal tasks belonging to this personal section
}

type Task {
  id: ID!
  title: String!
  description: String
  status: TaskStatus!
  priority: Priority!
  dueDate: String
  startDate: String
  endDate: String
  createdAt: String!
  updatedAt: String!
  completed: Boolean!

  # New fields for points and completion percentage
  points: Int
  completionPercentage: Float

  # Relationships for project tasks
  project: Project
  sprint: Sprint # New: for project tasks
  section: Section # New: for project tasks

  # Relationships for personal tasks
  personalUser: User # Original userId renamed for clarity for personal tasks
  personalWorkspace: Workspace # New: Workspace for personal tasks
  personalSection: PersonalSection # New: for personal tasks

  # Common relationships (assignee, creator, subtasks, dependencies)
  assignee: User
  creator: User!

  parent: Task
  subtasks: [Task!]!

  dependencies: [TaskDependency!]!
  dependents: [TaskDependency!]!

  comments: [Comment!]!
  activities: [Activity!]!
  labels: [TaskLabel!]!
}

type Label {
  id: ID!
  name: String!
  color: String!
  # workspaceId: String! # Typically exposed via the workspace object itself
  workspace: Workspace! # Relation to Workspace
  tasks: [TaskLabel!]!
}

type TaskLabel {
  taskId: String!
  labelId: String!
  task: Task!
  label: Label!
}

type Document {
  id: ID!
  title: String!
  content: JSON
  createdAt: String!
  updatedAt: String!

  project: Project
  personalUser: User

  comments: [Comment!]!
  activities: [Activity!]!
}

type Wireframe {
  id: ID!
  title: String!
  data: JSON!
  thumbnail: String
  createdAt: String!
  updatedAt: String!

  project: Project
  personalUser: User

  comments: [Comment!]!
  activities: [Activity!]!
}

type Comment {
  id: ID!
  content: String!
  createdAt: String!
  updatedAt: String!
  author: User!

  task: Task
  document: Document
  wireframe: Wireframe
  prompt: Prompt

  mentions: [Mention!]!
}

type Mention {
  id: ID!
  comment: Comment!
  user: User!
}

type Activity {
  id: ID!
  type: ActivityType!
  data: JSON!
  createdAt: String!
  user: User!

  project: Project
  task: Task
  document: Document
  wireframe: Wireframe
  prompt: Prompt
}

type Subscription {
  id: ID!
  plan: Plan!
  status: SubscriptionStatus!
  currentPeriodEnd: String!
  cancelAtPeriodEnd: Boolean!
  stripeCustomerId: String
  stripeSubscriptionId: String
  createdAt: String!
  updatedAt: String!
  workspace: Workspace!
}

type Prompt {
  id: ID!
  title: String!
  content: String!
  description: String
  category: String
  tags: [String!]!
  isPublic: Boolean!
  createdAt: String!
  updatedAt: String!

  project: Project
  user: User

  comments: [Comment!]!
  activities: [Activity!]!
}

type TaskDependency {
  id: ID!
  type: DependencyType!
  lag: Int!

  precedingTask: Task!
  dependentTask: Task!
}

type WorkspaceData {
  id: ID!
  name: String!
  description: String
  industry: String
  teamSize: String
  workFields: [String!]
  members: [WorkspaceMemberData!]!
  projects: [ProjectData!]!
}

type WorkspaceMemberData {
  id: ID! # This is the WorkspaceMember ID
  role: WorkspaceRole!
  user: UserPartial! # Partial user data
}

type UserPartial {
  id: ID!
  email: String!
  firstName: String
  lastName: String
}

type ProjectData {
  id: ID!
  name: String!
  description: String
  status: ProjectStatus!
  projectMemberCount: Int!
  totalTaskCount: Int!
  completedTaskCount: Int!
}

type ProjectMemberDetails { # For ProjectDetails, more detailed than WorkspaceMemberData
  id: ID! # ProjectMember ID
  role: ProjectRole!
  user: UserFullDetails! # More user info needed here
}

# --- NEW TYPES FOR GANTT VIEW QUERY ---
type GanttTaskData { # Custom type to match Gantt library's Task structure
  id: ID!
  name: String!
  start: String! # ISO Date string
  end: String!   # ISO Date string
  progress: Int!
  type: String!  # "task", "milestone", "project" (for sprint parents)
  sprint: ID     # The ID of the parent sprint (if type is task/milestone)
  hideChildren: Boolean
  displayOrder: Int
  # Add other relevant fields if you have them in Task/Milestone (e.g., description, assignee)
  description: String
  assignee: UserAvatarPartial
}

type GanttDataResponse {
  sprints: [SprintNameId!]! # List of sprints for filter dropdown
  tasks: [GanttTaskData!]! # Flattened list of tasks/milestones for Gantt chart
}

type SprintDetails { # Update SprintDetails type
  id: ID!
  name: String!
  description: String
  startDate: String!
  endDate: String!
  isCompleted: Boolean!
  status: SprintStatus!
  tasks: [TaskListView!]! # Tasks directly under this sprint
  milestones: [Milestone!]! # NEW: Milestones directly under this sprint
}

# You might also consider an ActivityDetails type if you uncomment it
# type ActivityDetails {
#   id: ID!
#   type: ActivityType!
#   data: JSON!
#   createdAt: String!
#   user: UserFullDetails!
# }

type ProjectDetails { # New type to represent the comprehensive data for a single project page
  id: ID!
  name: String!
  description: String
  status: ProjectStatus!
  color: String!
  createdAt: String!

  # Computed stats
  totalTasks: Int!
  completedTasks: Int!
  inProgressTasks: Int!
  overdueTasks: Int!
  upcomingDeadlines: Int!

  members: [ProjectMemberDetails!]!
  sprints: [SprintDetails!]!
  # activities: [ActivityDetails!]! # Uncomment if needed
}

type UserFullDetails {
  id: ID!
  email: String!
  firstName: String
  lastName: String
  avatar: String # Added avatar
}

type UserAvatarPartial { # For assignee in tasks, similar to UserFullDetails but named for context
  id: ID!
  firstName: String
  lastName: String
  avatar: String
}

type SprintNameId { # For the dropdown filter
  id: ID!
  name: String!
}

type TaskListView { # Simplified Task type for list view
  id: ID!
  title: String!
  description: String
  status: TaskStatusGQL! # Mapped from Prisma TaskStatus
  priority: PriorityGQL!
  dueDate: String # YYYY-MM-DD
  points: Int       # Added points field
  completionPercentage: Float # Added completionPercentage field
  assignee: UserAvatarPartial # Assignee details
  completed: Boolean! # Derived field for UI
}

type SectionWithTasks { # For project sections
  id: ID!
  name: String!
  tasks: [TaskListView!]!
}

type PersonalSectionWithTasks { # For personal sections
  id: ID!
  name: String!
  tasks: [TaskListView!]!
}


input DeleteSectionOptions {
  deleteTasks: Boolean! # True to delete tasks, false to reassign
  reassignToSectionId: ID # Required if deleteTasks is false
}



# New model: Section for a project
# Redundant type definition, as 'Section' is already defined above.
# This one should be removed or merged if it represents the same concept.
# I will assume the first 'Section' definition is the correct one.
# type Section {
#   id: ID!
#   name: String!
#   order: Int!
#   createdAt: String!
#   updatedAt: String!
#   project: Project!
#   tasks: [Task!]! # Tasks belonging to this section
# }


type ProjectTasksAndSectionsData {
  sprints: [SprintNameId!]!
  sections: [SectionWithTasks!]!
  personalSections: [PersonalSectionWithTasks!]!
  projectMembers: [ProjectMemberFullDetails!]!
  defaultSelectedSprintId: ID # NEW: Add this field to the type
}



# ----------------------------------
# Root Queries
# ----------------------------------
type Query {
  getGanttData(projectId: ID!, sprintId: ID): GanttDataResponse # NEW Query

  getProjectTasksAndSections(projectId: ID!, sprintId: ID): ProjectTasksAndSectionsData

  getProjectDetails(projectId: ID!): ProjectDetails

  getWorkspaceData: WorkspaceData # New query
  me: User
}



# Input type for creating a task
input CreateProjectTaskInput {
  projectId: ID!
  sectionId: ID!
  title: String!
  description: String
  status: TaskStatusGQL
  priority: PriorityGQL
  dueDate: String
  startDate: String
  endDate: String
  assigneeId: ID
  sprintId: ID
  points: Int
  parentId: ID # For subtasks, if you implement this in ListView
}

# Input type for updating a task
input UpdateProjectTaskInput {
  id: ID!
  title: String # Changed from String! to String (optional, not nullable)
  description: String
  status: TaskStatusGQL
  priority: PriorityGQL
  dueDate: String # Changed to String (optional)
  startDate: String
  endDate: String
  assigneeId: ID # Changed to ID (optional)
  sprintId: ID # Changed to ID (optional)
  points: Int # Changed to Int (optional)
  parentId: ID
}





type ProjectMemberFullDetails { # NEW: For project members list
  id: ID! # This is the ProjectMember ID
  role: ProjectRole!
  user: UserFullDetails!
}

# ----------------------------------
# Root Mutations (CRUD-style)
# ----------------------------------
type Mutation {


  
  createProjectTask(input: CreateProjectTaskInput!): TaskListView! # New mutation
  updateProjectTask(input: UpdateProjectTaskInput!): TaskListView! # New mutation

  deleteProjectSection(id: ID!, options: DeleteSectionOptions): Section! # Updated mutation

  createProjectSection(projectId: ID!, name: String!, order: Int): Section! # New mutation
  updateProjectSection(id: ID!, name: String, order: Int): Section! # New mutation

  createUser(email: String!, password: String, firstName: String, lastName: String, role: UserRole): User! # Added password to creation

  setupWorkspace(
    userId: ID!
    workspaceName: String!
    workspaceDescription: String
    projectName: String!
    projectDescription: String
    industry: String
    teamSize: String
    workFields: [String!]
  ): Workspace! # Returns the created Workspace

  createProject(
    workspaceId: ID!
    name: String!
    description: String
  ): Project! # Returns the created Project

  deleteProjectTask(id: ID!): TaskListView! # NEW: Mutation to delete a task
}

# ----------------------------------
# Scalars
# ----------------------------------
scalar JSON