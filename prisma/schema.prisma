// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  firstName String?
  lastName  String?
  avatar    String?
  firebaseUid String? @unique
  role      UserRole @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Workspace relationships
  workspaceMembers WorkspaceMember[]
  ownedWorkspaces  Workspace[]       @relation("WorkspaceOwner")

  // Project relationships
  projectMembers ProjectMember[]
  assignedTasks  Task[]          @relation("TaskAssignee")
  createdTasks   Task[]          @relation("TaskCreator")

  // Personal tasks (not tied to projects)
  personalTasks Task[] @relation("UserPersonalTasks")
  
  // Personal documents (not tied to projects)
  personalDocuments Document[] @relation("UserPersonalDocuments")
  
  // Personal wireframes (not tied to projects)
  personalWireframes Wireframe[] @relation("UserPersonalWireframes")
  
  // Personal prompts (AI prompts/templates)
  personalPrompts Prompt[] @relation("UserPersonalPrompts")

  // Activity tracking
  activities Activity[]

  // Comments and mentions
  comments Comment[]
  mentions Mention[]

  @@map("users")
}

model Workspace {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  avatar      String?
  plan        Plan      @default(FREE)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  ownerId     String
  owner       User      @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  // Members
  members WorkspaceMember[]

  // Projects
  projects Project[]

  // Billing
  subscription Subscription?

  // Settings
  settings WorkspaceSettings?

  @@map("workspaces")
}

model WorkspaceMember {
  id          String        @id @default(cuid())
  role        WorkspaceRole @default(MEMBER)
  joinedAt    DateTime      @default(now())
  workspaceId String
  userId      String
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
  @@map("workspace_members")
}

model WorkspaceSettings {
  id                    String    @id @default(cuid())
  allowGuestAccess      Boolean   @default(false)
  defaultProjectPrivacy Privacy   @default(PRIVATE)
  timeZone              String    @default("UTC")
  workspaceId           String    @unique
  workspace             Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("workspace_settings")
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  color       String    @default("#4ECDC4")
  privacy     Privacy   @default(PRIVATE)
  status      Status    @default(ACTIVE)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  // Members
  members ProjectMember[]

  // Project-specific tasks
  tasks Task[] @relation("ProjectTasks")

  // Project-specific documents
  documents Document[] @relation("ProjectDocuments")

  // Project-specific wireframes
  wireframes Wireframe[] @relation("ProjectWireframes")
  
  // Project-specific prompts
  prompts Prompt[] @relation("ProjectPrompts")

  // Activities
  activities Activity[]

  @@map("projects")
}

model ProjectMember {
  id        String      @id @default(cuid())
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime    @default(now())
  projectId String
  userId    String
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  projectId   String?
  userId      String?    // For personal tasks
  assigneeId  String?
  creatorId   String
  
  project     Project?   @relation("ProjectTasks", fields: [projectId], references: [id], onDelete: Cascade)
  personalUser User?     @relation("UserPersonalTasks", fields: [userId], references: [id], onDelete: Cascade)
  assignee    User?      @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creator     User       @relation("TaskCreator", fields: [creatorId], references: [id])

  // Subtasks
  parentId String?
  parent   Task?   @relation("TaskSubtasks", fields: [parentId], references: [id])
  subtasks Task[]  @relation("TaskSubtasks")

  // Task dependencies for Gantt chart
  dependencies TaskDependency[] @relation("DependentTask")
  dependents   TaskDependency[] @relation("PrecedingTask")

  // Comments
  comments Comment[]

  // Activities
  activities Activity[]

  // Labels
  labels TaskLabel[]

  @@map("tasks")
}

model Label {
  id          String      @id @default(cuid())
  name        String
  color       String
  workspaceId String
  tasks       TaskLabel[]

  @@unique([name, workspaceId])
  @@map("labels")
}

model TaskLabel {
  taskId  String
  labelId String
  task    Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  label   Label  @relation(fields: [labelId], references: [id], onDelete: Cascade)

  @@id([taskId, labelId])
  @@map("task_labels")
}

model Document {
  id        String      @id @default(cuid())
  title     String
  content   Json?
  type      DocumentType @default(TEXT)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  
  projectId String?
  userId    String?    // For personal documents
  
  project   Project?   @relation("ProjectDocuments", fields: [projectId], references: [id], onDelete: Cascade)
  personalUser User?   @relation("UserPersonalDocuments", fields: [userId], references: [id], onDelete: Cascade)

  // Comments
  comments Comment[]

  // Activities
  activities Activity[]

  @@map("documents")
}

model Wireframe {
  id        String   @id @default(cuid())
  title     String
  data      Json     // Wireframe data (canvas elements, etc.)
  thumbnail String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  projectId String?
  userId    String?    // For personal wireframes
  
  project   Project?   @relation("ProjectWireframes", fields: [projectId], references: [id], onDelete: Cascade)
  personalUser User?   @relation("UserPersonalWireframes", fields: [userId], references: [id], onDelete: Cascade)

  // Comments
  comments Comment[]

  // Activities
  activities Activity[]

  @@map("wireframes")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // Polymorphic relations
  taskId      String?
  documentId  String?
  wireframeId String?
  promptId    String?
  task        Task?      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  document    Document?  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  wireframe   Wireframe? @relation(fields: [wireframeId], references: [id], onDelete: Cascade)
  prompt      Prompt?    @relation(fields: [promptId], references: [id], onDelete: Cascade)

  // Mentions
  mentions Mention[]

  @@map("comments")
}

model Mention {
  id        String  @id @default(cuid())
  commentId String
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
  @@map("mentions")
}

model Activity {
  id        String       @id @default(cuid())
  type      ActivityType
  data      Json
  createdAt DateTime     @default(now())
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Polymorphic relations
  projectId   String?
  taskId      String?
  documentId  String?
  wireframeId String?
  promptId    String?
  project     Project?   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task        Task?      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  document    Document?  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  wireframe   Wireframe? @relation(fields: [wireframeId], references: [id], onDelete: Cascade)
  prompt      Prompt?    @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@map("activities")
}

model Subscription {
  id                String            @id @default(cuid())
  plan              Plan
  status            SubscriptionStatus
  currentPeriodEnd  DateTime
  cancelAtPeriodEnd Boolean           @default(false)
  stripeCustomerId  String?
  stripeSubscriptionId String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  workspaceId       String            @unique
  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Prompt {
  id          String     @id @default(cuid())
  title       String
  content     String
  description String?
  category    String?
  tags        String[]
  isPublic    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  projectId   String?
  userId      String?
  project     Project?   @relation("ProjectPrompts", fields: [projectId], references: [id], onDelete: Cascade)
  user        User?      @relation("UserPersonalPrompts", fields: [userId], references: [id], onDelete: Cascade)

  // Comments
  comments Comment[]

  // Activities
  activities Activity[]

  @@map("prompts")
}

model TaskDependency {
  id              String @id @default(cuid())
  precedingTaskId String
  dependentTaskId String
  type            DependencyType @default(FINISH_TO_START)
  lag             Int @default(0) // Days of lag/lead time
  
  precedingTask   Task @relation("PrecedingTask", fields: [precedingTaskId], references: [id], onDelete: Cascade)
  dependentTask   Task @relation("DependentTask", fields: [dependentTaskId], references: [id], onDelete: Cascade)

  @@unique([precedingTaskId, dependentTaskId])
  @@map("task_dependencies")
}

// Enums
enum UserRole {
  ADMIN
  MEMBER
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
}

enum Privacy {
  PUBLIC
  PRIVATE
}

enum Status {
  ACTIVE
  ARCHIVED
  DELETED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum DocumentType {
  TEXT
  MARKDOWN
  RICH_TEXT
}

enum DependencyType {
  FINISH_TO_START
  START_TO_START
  FINISH_TO_FINISH
  START_TO_FINISH
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  UNPAID
}



enum ActivityType {
  TASK_CREATED
  TASK_UPDATED
  TASK_COMPLETED
  TASK_ASSIGNED
  PROJECT_CREATED
  PROJECT_UPDATED
  DOCUMENT_CREATED
  DOCUMENT_UPDATED
  WIREFRAME_CREATED
  WIREFRAME_UPDATED
  COMMENT_ADDED
  MEMBER_ADDED
  MEMBER_REMOVED
}
