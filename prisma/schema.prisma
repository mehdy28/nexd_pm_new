// ---------------- Generator & Datasource ----------------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------- Enums ----------------
enum UserRole {
  ADMIN
  MEMBER
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}


enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  ARCHIVED
  CANCELLED
}

enum TaskStatus {
  TODO
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum SprintStatus { // NEW: Add SprintStatus enum to Prisma
  PLANNING
  ACTIVE
  COMPLETED
}

enum DependencyType {
  FINISH_TO_START
  START_TO_START
  FINISH_TO_FINISH
  START_TO_FINISH
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  UNPAID
}

enum ActivityType {
  TASK_CREATED
  TASK_UPDATED
  TASK_COMPLETED
  TASK_ASSIGNED
  PROJECT_CREATED
  PROJECT_UPDATED
  DOCUMENT_CREATED
  DOCUMENT_UPDATED
  WIREFRAME_CREATED
  WIREFRAME_UPDATED
  COMMENT_ADDED
  MEMBER_ADDED
  MEMBER_REMOVED
}

// ---------------- Core Models ----------------

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String?  // Added password field, made nullable for existing users or social logins
  firstName   String?
  lastName    String?
  avatar      String?
  firebaseUid String?  @unique
  role        UserRole @default(MEMBER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Workspace relationships
  workspaceMembers WorkspaceMember[]
  ownedWorkspaces  Workspace[]       @relation("WorkspaceOwner")

  // Project relationships
  projectMembers ProjectMember[]
  assignedTasks  Task[]          @relation("TaskAssignee")
  createdTasks   Task[]          @relation("TaskCreator")

  // Personal items
  personalTasks      Task[]      @relation("UserPersonalTasks")
  personalDocuments  Document[]  @relation("UserPersonalDocuments")
  personalWireframes Wireframe[] @relation("UserPersonalWireframes")
  personalPrompts    Prompt[]    @relation("UserPersonalPrompts")
  personalSections   PersonalSection[] // Added for personal sections

  // Activity & collaboration
  activities Activity[]
  comments   Comment[]
  mentions   Mention[]

  @@map("users")
}

model Workspace {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  avatar      String?
  plan        Plan     @default(FREE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String
  owner       User     @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  // New fields for Workspace
  industry    String?
  teamSize    String?
  workFields  String[] // List of strings for work fields

  members     WorkspaceMember[]
  projects    Project[]
  subscription Subscription?
  settings     WorkspaceSettings?
  // New: personal tasks can also be associated with a workspace (for context)
  personalTasks Task[] @relation("WorkspacePersonalTasks")

  @@map("workspaces")
}

model WorkspaceMember {
  id          String        @id @default(cuid())
  role        WorkspaceRole @default(MEMBER)
  joinedAt    DateTime      @default(now())
  workspaceId String
  userId      String
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
  @@map("workspace_members")
}

model WorkspaceSettings {
  id                    String    @id @default(cuid())
  allowGuestAccess      Boolean   @default(false)
  timeZone              String    @default("UTC")
  workspaceId           String    @unique
  workspace             Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("workspace_settings")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  color       String        @default("#4ECDC4")
  status      ProjectStatus @default(PLANNING)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  workspaceId String
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  members   ProjectMember[]
  tasks     Task[]      @relation("ProjectTasks")
  documents Document[]  @relation("ProjectDocuments")
  wireframes Wireframe[] @relation("ProjectWireframes")
  prompts    Prompt[]   @relation("ProjectPrompts")
  activities Activity[]
  // New: Sprints and Sections for the project
  sprints   Sprint[]
  sections  Section[]

  // Computed fields (via queries)
  // taskCount Int? @default(0)
  // doneTaskCount Int? @default(0)

  @@map("projects")
}

model ProjectMember {
  id        String      @id @default(cuid())
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime    @default(now())
  projectId String
  userId    String
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

// New model: Sprint for a project
model Sprint {
  id          String     @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  isCompleted Boolean    @default(false)
  status      SprintStatus @default(PLANNING) // NEW: Add status field
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)

  tasks Task[] // Tasks belonging to this sprint
  milestones Milestone[]

  @@map("sprints")
}

model Milestone {
  id          String   @id @default(cuid())
  name        String
  description String?
  dueDate     DateTime
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sprintId    String
  sprint      Sprint   @relation(fields: [sprintId], references: [id], onDelete: Cascade)

  @@map("milestones")
}



// New model: Section for a project
model Section {
  id          String   @id @default(cuid())
  name        String
  order       Int      @default(0) // To define the order of sections (e.g., TODO, IN_PROGRESS)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  tasks Task[] // Tasks belonging to this section

  @@map("sections")
}

// New model: PersonalSection for a user's personal tasks
model PersonalSection {
  id        String   @id @default(cuid())
  name      String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  tasks Task[] // Personal tasks belonging to this section

  @@unique([userId, name]) // Personal section names must be unique for a user
  @@map("personal_sections")
}

model Task {
  id                   String           @id @default(cuid())
  title                String
  description          String?
  status               TaskStatus       @default(TODO) // Keep TaskStatus, but actual section dictates visibility
  priority             Priority         @default(MEDIUM)
  dueDate              DateTime?
  startDate            DateTime?
  endDate              DateTime?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  completed            Boolean         @default(false) // New field: indicates if the task is completed

  // New fields for points and completion percentage
  points               Int?             // Optional field for points, e.g., for Scrum stories or epics
  completionPercentage Float?           // Optional field for tracking progress, 0.0 to 100.0

  // Relationships for project tasks
  projectId            String?
  sprintId             String?          // New: for project tasks, nullable
  sectionId            String?          // New: for project tasks, nullable
  project              Project?         @relation("ProjectTasks", fields: [projectId], references: [id], onDelete: Cascade)
  sprint               Sprint?          @relation(fields: [sprintId], references: [id], onDelete: SetNull) // If sprint is deleted, tasks remain but lose sprint
  section              Section?         @relation(fields: [sectionId], references: [id], onDelete: SetNull) // If section is deleted, tasks remain but lose section

  // Relationships for personal tasks
  personalUserId       String?          // Original userId renamed for clarity for personal tasks
  personalWorkspaceId  String?          // New: Workspace for personal tasks
  personalSectionId    String?          // New: for personal tasks, nullable
  personalUser         User?            @relation("UserPersonalTasks", fields: [personalUserId], references: [id], onDelete: Cascade)
  personalWorkspace    Workspace?       @relation("WorkspacePersonalTasks", fields: [personalWorkspaceId], references: [id], onDelete: SetNull) // Link personal task to workspace
  personalSection      PersonalSection? @relation(fields: [personalSectionId], references: [id], onDelete: SetNull) // Link personal task to personal section

  // Common relationships (assignee, creator, subtasks, dependencies)
  assigneeId           String?
  creatorId            String
  assignee             User?            @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creator              User             @relation("TaskCreator", fields: [creatorId], references: [id])

  // Subtasks
  parentId             String?
  parent               Task?            @relation("TaskSubtasks", fields: [parentId], references: [id])
  subtasks             Task[]           @relation("TaskSubtasks")

  // Dependencies
  dependencies         TaskDependency[] @relation("DependentTask")
  dependents           TaskDependency[] @relation("PrecedingTask")

  // Collaboration
  comments             Comment[]
  activities           Activity[]
  labels               TaskLabel[]

  // Ensure either it's a project task OR a personal task, but not both or neither
  // This cannot be enforced directly in Prisma schema, but will be enforced via application logic
  // @check((projectId != null AND personalUserId IS NULL) OR (projectId IS NULL AND personalUserId != null))

  @@map("tasks")
}

model Label {
  id          String      @id @default(cuid())
  name        String
  color       String
  workspaceId String
  tasks       TaskLabel[]

  @@unique([name, workspaceId])
  @@map("labels")
}

model TaskLabel {
  taskId  String
  labelId String
  task    Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  label   Label  @relation(fields: [labelId], references: [id], onDelete: Cascade)

  @@id([taskId, labelId])
  @@map("task_labels")
}

model Document {
  id        String       @id @default(cuid())
  title     String
  content   Json?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  projectId String?
  userId    String?

  project      Project? @relation("ProjectDocuments", fields: [projectId], references: [id], onDelete: Cascade)
  personalUser User?    @relation("UserPersonalDocuments", fields: [userId], references: [id], onDelete: Cascade)

  comments   Comment[]
  activities Activity[]

  @@map("documents")
}

model Wireframe {
  id        String   @id @default(cuid())
  title     String
  data      Json
  thumbnail String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectId String?
  userId    String?

  project      Project? @relation("ProjectWireframes", fields: [projectId], references: [id], onDelete: Cascade)
  personalUser User?    @relation("UserPersonalWireframes", fields: [userId], references: [id], onDelete: Cascade)

  comments   Comment[]
  activities Activity[]

  @@map("wireframes")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // Polymorphic
  taskId      String?
  documentId  String?
  wireframeId String?
  promptId    String?
  task        Task?      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  document    Document?  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  wireframe   Wireframe? @relation(fields: [wireframeId], references: [id], onDelete: Cascade)
  prompt      Prompt?    @relation(fields: [promptId], references: [id], onDelete: Cascade)

  mentions Mention[]

  @@map("comments")
}

model Mention {
  id        String  @id @default(cuid())
  commentId String
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
  @@map("mentions")
}

model Activity {
  id        String       @id @default(cuid())
  type      ActivityType
  data      Json
  createdAt DateTime     @default(now())
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Polymorphic
  projectId   String?
  taskId      String?
  documentId  String?
  wireframeId String?
  promptId    String?
  project     Project?   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task        Task?      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  document    Document?  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  wireframe   Wireframe? @relation(fields: [wireframeId], references: [id], onDelete: Cascade)
  prompt      Prompt?    @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@map("activities")
}

model Subscription {
  id                   String             @id @default(cuid())
  plan                 Plan
  status               SubscriptionStatus
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean            @default(false)
  stripeCustomerId     String?
  stripeSubscriptionId String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  workspaceId          String             @unique
  workspace            Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Prompt {
  id          String   @id @default(cuid())
  title       String
  content     String
  description String?
  category    String?
  tags        String[]
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  projectId String?
  userId    String?
  project   Project? @relation("ProjectPrompts", fields: [projectId], references: [id], onDelete: Cascade)
  user      User?    @relation("UserPersonalPrompts", fields: [userId], references: [id], onDelete: Cascade)

  comments   Comment[]
  activities Activity[]

  @@map("prompts")
}

model TaskDependency {
  id              String         @id @default(cuid())
  precedingTaskId String
  dependentTaskId String
  type            DependencyType @default(FINISH_TO_START)
  lag             Int            @default(0)

  precedingTask Task @relation("PrecedingTask", fields: [precedingTaskId], references: [id], onDelete: Cascade)
  dependentTask Task @relation("DependentTask", fields: [dependentTaskId], references: [id], onDelete: Cascade)

  @@unique([precedingTaskId, dependentTaskId])
  @@map("task_dependencies")
}